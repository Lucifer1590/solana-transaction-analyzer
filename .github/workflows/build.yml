name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of the release'
        required: true
        default: 'Manual Release'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            output_name: transaction_analysis_linux
          - os: windows-latest
            output_name: transaction_analysis_windows.exe

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Build binary
      run: pyinstaller --onefile transaction_analysis.py --name ${{ matrix.output_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.output_name }}
        path: dist/${{ matrix.output_name }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: Create Release and Upload Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;
          
          // Determine release name and tag
          const isTagPush = context.ref.startsWith('refs/tags/');
          const tagName = isTagPush ? context.ref.replace('refs/tags/', '') : `release-${sha.slice(0, 7)}`;
          const releaseName = context.payload.inputs ? context.payload.inputs.release_name : `Release ${tagName}`;
          
          // Create release
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tagName,
            name: releaseName,
            draft: false,
            prerelease: false
          });
          
          // Upload assets
          const assets = ['transaction_analysis_linux', 'transaction_analysis_windows.exe'];
          for (const asset of assets) {
            const filePath = `./${asset}/${asset}`;
            const fileContent = await fs.readFile(filePath);
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.data.id,
              name: asset,
              data: fileContent
            });
            console.log(`Uploaded ${asset} to release ${release.data.id}`);
          }
          
          console.log(`Created release ${release.data.id} with name "${releaseName}" and tag "${tagName}"`);
